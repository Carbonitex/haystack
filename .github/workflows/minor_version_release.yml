name: Minor Version Release

# TODO ACTIVATE MANUALLY TO CREATE VERSION
#on:
#  workflow_dispatch:
#    inputs:
#      version:
#        description: 'Version to release in the format of v1.10.x '
#        required: true


#TODO CREATE BRANCH

on:
  push:
    branches:
      - readme_release_workflow

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout this repo
        uses: actions/checkout@v3

      - name: Set up Python 3.8.10
        uses: actions/setup-python@v2
        with:
          python-version: 3.8.10

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pydoc-markdown==4.5.1

      - name: Get latest version of Haystack
        id: latest-version
        uses: pozetroninc/github-action-get-latest-release@master
        with:
          repository: ${{ github.repository }}
          excludes: prerelease, draft

      - name: Convert version name to regular semver (e.g. v1.10.x -> v1.10.0)
        env:
          version: ${{steps.version.outputs.release}}
        run: |
            echo $version | sed -e 's/x$//' | { var=$(cat); echo "VERSION=v${var}0" >> $GITHUB_ENV; }
            echo $version | sed -e 's/x$//'

      - name: Compare current version with latest
        uses: madhead/semver-utils@latest
        id: version
        with:
          version: $VERSION
          # Compare to latest
          compare-to: ${{ steps.latest-version.outputs.release }}

      - name: Save short version name
        env:
          version: ${{steps.version.outputs.release}}
        run: |
          echo $version | sed -e 's/\.[0-9]*$//' | { var=$(cat); echo "VERSION_SHORT=v${var}" >> $GITHUB_ENV; }
          echo $version | sed -e 's/\.[0-9]*$//'

      # Only run this when we release a new minor version
      # Note that patch versions all sync to the one readme minor version
      # e.g. Haystack 1.9.1 and 1.9.2 both map to Readme 1.9
      - name: Release Haystack-Readme version
        if: steps.version.outputs.comparison-result == '>'
        run: |
          python ./.github/utils/release_docs.py --version "$VERSION_SHORT" --key ${{ secrets.README_API_KEY }}
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "Update API docs headers"
          git push



