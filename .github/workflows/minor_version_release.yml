name: Minor Version Release

on:
  workflow_dispatch:


## Debug
#on:
#  push:
#    branches:
#      - readme_release_workflow
#    inputs:
#      version:
#        default: v1.10.x
#        description: 'Version to release (in the format of v1.10.x) '
#        required: true

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout this repo
        uses: actions/checkout@v3

      - name: Set up Python 3.8.10
        uses: actions/setup-python@v2
        with:
          python-version: 3.8.10

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pydoc-markdown==4.5.1

      - name: Create new version branch
        run: |
          git checkout -b ${{github.event.inputs.version}}
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git push -u origin ${{github.event.inputs.version}}

      # BUMP VERSION ON MAIN
      # README CREATES NEW RELEASE

      - name: Get current version
        id: current-version
        shell: bash
        # We only need `major.minor` in Readme so we cut the full version string to the first two tokens
        run: echo "::set-output name=minor::$(cat VERSION.txt | cut -d "." -f 1,2)"

      - name: Increment minor version number in VERSION.txt
        run: |
          git checkout main
          git pull
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git checkout -b bump_version
          echo ${{ steps.current-version.outputs.minor }}.$((${GITHUB_RUN_NUMBER} + 1)) > VERSION.txt

      # Note that patch versions all sync to the one readme minor version
      # e.g. Haystack 1.9.1 and 1.9.2 both map to Readme 1.9
      - name: Release Readme version
        run: |
          git checkout ${{github.event.inputs.version}}
          python ./.github/utils/release_docs.py --version ${{ steps.current-version.outputs.minor }} --key ${{ secrets.README_API_KEY }}
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "Update API docs headers and readme_api_sync.yml to sync to new version"
          git push

      - name: Edit category versions in API pydoc configs
        run: |
          git checkout ${{github.event.inputs.version}}
          python ./.github/utils/change_api_category_id.py --version ${{ steps.current-version.outputs.minor }} --key ${{ secrets.README_API_KEY }}
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "Update API docs headers and readme_api_sync.yml to sync to new version"
          git push

      - name: Edit sync version in new branch
      - run: |
          git checkout ${{github.event.inputs.version}}
          python ./.github/utils/change_api_sync_version.py --version "$VERSION"
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "Change version in readme_api_sync.yml to sync to new version"
          git push

      # TODO Can this actually commit changes to main? Do we want this?
      - name: Edit version in main
      - run: |
          git checkout main
          python ./.github/utils/change_api_sync_version.py --version "$VERSION" --unstable
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "Change version in readme_api_sync.yml to sync to new version"
          git push



